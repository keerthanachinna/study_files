May 3, 2023 Â· the angular16 release with a lot of new features include angular signals this can be a game changer for angular angular signals add reactivity to the angular applications
angular dependes on change detection and zone.js to detect changes anf update the view
the zone.js is a third party libary .it works wll with angular applications but as angular applications scale it also becomes the bottleneck impacting the performance
how change detechtion workd in angular?
when any change triggerd then the zone.js start looking for a change throughout the angular copmponets the zone.js detects that somethings has change but cannot specify exactly which componet has been updated and needs re -rendering

the zon.js starts from the root componet and starts looking for the changes by running detectChanges() method from the root componet .this leads to performance issues for larger angular applications
so here is angular signal comes in picture the angular 16 realsed signals to deal with this problem .this is the angular solutions to introduce reactivity in aplication 
the angular singals is nothing but a wrapper aound the value to track the state of the value throughtout the application

the siganl have 3 core component also called reacti

1.siganl
2.computed
3.effect

signals

writable signals provide an api for updating theri vaues directly you create writable signals by calling
the siganls function with the signal's inial value

computed singals
 A computed signal derives its value from other signals Define one using computed and specifying a derivation function
 the double count signal depends on the count whenever count updateds angular knows that anything which depends on either count or doubleCount needs to updat as well
 
 const count: writableSignal<number>=signal(0);
 const doubleCount:Signal<number>=computed(()=>count()*2);

 Effects
 Signals are useful because they can notify iinterested counsumes when they change.an effect is an operation that runs whenever one more signals values change you can create an effect with the effect function


 effect(()=>{
     console.log(`The current count is:${count()}`);
 });

Effects always run at least once when an effect runs its tracks any signal value reads whenever any of thease siggnal values change the effect runs again

